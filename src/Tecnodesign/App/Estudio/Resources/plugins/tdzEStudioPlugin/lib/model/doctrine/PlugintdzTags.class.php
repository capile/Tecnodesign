<?php

/**
 * PlugintdzTags
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PlugintdzTags extends BasetdzTags
{
  public static $filter=array();
  public static function connect()
  {
    return tdzEntries::connect();
  }
  public static function query()
  {
    return new Doctrine_RawSql(tdzEntries::connect());
  }
  public static function getInstance()
  {
    return Doctrine_Core::getTable('tdzTags');
  }
  public static function search($s='', $exact=false)
  {
    $s = preg_split('/\s*,\s*/', trim($s), null, PREG_SPLIT_NO_EMPTY);
    $res=array();
    $w='';
    if(count($s)==0) {
      if($exact) return $res;
      else $s='';
    } else if(count($s)==1) {
      $s=$s[0];
    } else {
      $tags=$s;
      $s=array_pop($tags);
      foreach($tags as $tag)
      {
        $tag=tdz::textToSlug($tag);
        $w.=' and t.slug<>\''.$tag.'\'';
      }
    }
    $s = tdz::slug($s);
    if($s=='' && $exact)return $res;
    $conn = self::connect();
    if($s=='')
      $sql='select distinct t.tag, t.slug from tdz_tags as t group by t.slug';
    else if($exact)
      $sql='select distinct t.tag, t.slug from tdz_tags as t where t.slug=\''.$s.'\''.$w.' group by t.slug';
    else
      $sql='select distinct t.tag, t.slug from tdz_tags as t where t.slug like \''.$s.'%\''.$w.' group by t.slug';
    $query = $conn->prepare($sql);
    $query->execute(array());
    $tags = $query->fetchAll(Doctrine_Core::FETCH_ASSOC);
    foreach($tags as $tag)
      $res[$tag['slug']]=$tag['tag'];
    return $res;
  }

  /**
   * Shows a tag cloud to navigate the news
   *
   * @param tdzEntries $e entry to use as reference
   */
  public static function getCloud($e=null)
  {
    $eid=false;
    if(is_object($e))
      $eid=$e->id;
    else if(!is_null($e))
      $eid=$e;

    $ids=array();
    $conn = self::connect();
    if($eid)
    {
      $sql='select distinct c.content from tdz_contents as c where c.entry=? and c.content_type=\'feed\' and c.expired is null';
      $query = $conn->prepare($sql);
      $query->execute(array($eid));
      $c = $query->fetchAll(Doctrine_Core::FETCH_ASSOC);
      if(isset($c[0]))
      {
        foreach($c as $cy)
        {
          $ce=sfYaml::load($cy['content']);
          if($ce['entry']!='')$ids[]=$ce['entry'];
        }
      }
    }
    $qs=tdz::scriptName().'?';
    $slugs=array();
    if(isset($_GET['tag']))
    {
      $sel=$_GET['tag'];
      if(!is_array($sel))
        $sel=array($sel);
      foreach($sel as $st)
      {
        $slug=tdz::textToSlug($st);
        if($slug=='')break;
        $slugs[$slug] = tdz::xmlEscape($slug);
      }
    }
    if(count($slugs)>0) $qs .= 'tag[]='.implode('&amp;tag[]=',$slugs).'&amp;';
    $where='';
    //AND:
    //$where=(count($slugs)>0)?(' inner join tdz_tags as t2 on t2.entry=t.entry and t2.expired is null and t2.slug in (\''.implode('\',\'',$slugs).'\')'):('');
    $i=2;
    foreach($slugs as $slug=>$xml){
        $where.=' inner join tdz_tags as t'.$i.' on t'.$i.'.entry=t.entry and t'.$i.'.expired is null and t'.$i.'.slug='.tdz::sqlEscape($slug);
        $i++;
    }
    if(isset(self::$filter['year']))
    {
      $year=(int)self::$filter['year'];
      if($year)
      {
        $where .= ' inner join tdz_entries as e on e.id=t.entry and e.expired is null and year(e.published)=\''.$year.'\'';
        $qs .= 'y='.$year.'&amp;';
      }
    }
    $pe = tdz::get('feed-preview');
    if ($pe) {
        $where .= ' where t.entry='.$pe.' ';
    }
    $sql='select count(distinct t.entry) as entries, t.slug, t.tag from tdz_tags as t inner join tdz_relations as r on r.entry=t.entry and r.parent in (\''.implode('\',\'',$ids).'\')'.$where.'  group by t.slug order by 1 desc';
    $query = $conn->prepare($sql);
    $query->execute();
    $tags = $query->fetchAll(Doctrine_Core::FETCH_ASSOC);
    $limit=25;
    $levels=5;
    $ptags=array();
    foreach($tags as $i=>$tag) {
        $prefix = '';
        $pos = strpos($tag['tag'], ':');
        if ($pos) {
            $prefix = trim(substr($tag['tag'], 0, $pos));
            $tag['tag'] = trim(substr($tag['tag'], $pos+1));
        }
        $ptags[$prefix][]=$tag;
    }
    ksort($ptags);
    /*
    if(isset($ptags[''])) {
        $tags = $ptags[''];
        unset($ptags['']);
        $ptags['']=$tags;
    }
     */
    $ps = tdz::get('filters');
    foreach ($ptags as $prefix=>$tags) {
        $last=(count($tags)>$limit)?($limit):(count($tags));
        $max=(int)$tags[0]['entries'];
        $min=(int)$tags[$last-1]['entries'];
        $d=($max-$min)/($levels);
        $s=array();
        $l=-1;
        $pl=0;
        foreach($tags as $i=>$tag) {
            if($i >= $limit) break;
            if($pl!=$tag['entries']) {
                $l++;
                $pl = $tag['entries'];
            }
            $rank=(int)(($last - $l)*$levels / $last);
            $s[$tag['slug']] = '<a class="r'.$rank.'" href="'.$qs.'tag[]='.$tag['slug'].'">'.tdz::xmlEscape($tag['tag']).'</a>';
            $tags[$i]['rank']=$rank;
        }
        $ptags[$prefix]=$tags;
        if (count($s)>0) {
            ksort($s);
            $class = ($prefix!='')?(' prefix prefix-'.$prefix):('');
            $ps .= '<div class="tag-cloud l'.($l+1).$class.'">';
            if ($prefix !='') {
                $ps .= '<h3>' . $prefix . '</h3>';
            }
            $ps .= implode(' ',$s).'</div><br style="clear:both" />';
        }
    }
    return $ps;
  }


  public function preInsert($event)
  {
    $web=(isset($_SERVER['REQUEST_URI']));
    if($web || !strtotime($this->created))
      $this->created = date('Y-m-d H:i:s', time());
    if($web || !strtotime($this->updated))
      $this->updated = date('Y-m-d H:i:s', time());
  }
  public function preUpdate($event)
  {
    $web=(isset($_SERVER['REQUEST_URI']));
    if($web || !strtotime($this->updated))
      $this->updated = date('Y-m-d H:i:s', time());
  }
}