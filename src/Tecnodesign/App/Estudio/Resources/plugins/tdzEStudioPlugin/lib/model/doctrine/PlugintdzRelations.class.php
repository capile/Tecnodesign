<?php

/**
 * PlugintdzRelations
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: PlugintdzRelations.class.php 1134 2012-12-09 19:10:26Z capile $
 */
abstract class PlugintdzRelations extends BasetdzRelations
{
  public static function connect()
  {
    return tdzEntries::connect();
  }
  public static function query()
  {
    return new Doctrine_RawSql(tdzEntries::connect());
  }
  public function fixPosition()
  {
    $conn = Doctrine::getConnectionByTableName('tdz_relations');
    $sql = 'select max(r.position) as position from tdz_relations as r where r.parent='.$this->parent;
    $query = $conn->prepare($sql);
    $query->execute(array());
    $r = $query->fetchAll(Doctrine_Core::FETCH_ASSOC);
    if(isset($r[0]['position']))return 1+$r[0]['position'];
    else return 1;
  }

  public static function findChild($id, $options=array())
  {
    $q = new Doctrine_RawSql(self::connect());
    $q->select('{r.id},{r.entry},{r.parent},{r.position},{r.updated}')
      ->from("tdz_relations as r")
      ->addComponent('r', 'tdzRelations')
      ->where("r.parent=?",$id)
      ->orderBy('r.position asc');
    if(!isset($options['hydrate']))
      $options['hydrate']=Doctrine::HYDRATE_ARRAY;
    $entries = $q->execute(array(),$options['hydrate']);
    return $entries;
  }
  public function fixPositions()
  {
    // get all contents in the same entry that share the same slot
    $conn = Doctrine::getConnectionByTableName('tdz_relations');
    $position = (int)$this->getPosition();
    if($position<1)$position=1;
    if($this->parent=='')
    {
      // update root entries
      //self::fixRootEntries();
    }
    $q = new Doctrine_RawSql($conn);
    $q->select('{r.*}')
      ->from("tdz_relations as r")
      ->addComponent('r', 'tdzRelations');

    if($this->parent=='')
      $q->where('r.parent is null');
    else
      $q->where('r.parent=:parent',array('parent'=>$this->parent));

    $q->andWhere("r.expired is null and ifnull(r.position,1)>=:position and r.entry<>:entry",array('position'=>$position,'entry'=>$this->entry))
      ->orderBy('r.position asc');
    $relations = $q->execute();
    foreach($relations as $rel)
    {
      $position++;
      //$q = Doctrine_Query::create()->update('tdzRelations')->set('position',$position)->where('id=?', $rel->getId())->execute();
      $rel->setPosition($position);
      $rel->save();
    }
    $co=glob(sfConfig::get('sf_app_cache_dir').'/tdzRelationsSitemap/*.cache');
    foreach($co as $cf)
      @unlink($cf);
  }

  public static function getRootEntries()
  {
    $conn = Doctrine::getConnectionByTableName('tdz_entries');
    $q = new Doctrine_RawSql($conn);
    /*
select distinct e.id,e.title,e.link, e.published from tdz_entries as e left outer join tdz_relations as r on r.parent=e.id left outer join tdz_relations as r2 on r2.entry=e.id
where e.expired is null and r.expired is null and e.type='page' and ((r.parent is not null and r2.parent is null) or (r.parent is null and r2.parent is null and r2.entry is not null))
order by r2.position,e.published desc
     */
    $q->select('{e.id},{e.title},{e.link},{e.published}')
      ->from("tdz_entries as e left outer join tdz_relations as r on r.parent=e.id left outer join tdz_relations as r2 on r2.entry=e.id")
      ->addComponent('e', 'tdzEntries')
      ->where("e.expired is null and r.expired is null and e.type='page' and ((r.parent is not null and r2.parent is null) or (r.parent is null and r2.parent is null and r2.entry is not null))")
      ->orderBy('ifnull(r2.position,999),e.published desc');
    $entries = $q->execute();
    return $entries;
  }
  public static function fixRootEntries()
  {
    $entries=self::getRootEntries();
    $position=1;
    foreach($entries as $entry)
    {
      $par=$entry->getParents();
      if($par->count()==0)
      {
        $par = new tdzRelations();
        $par['entry']=$entry['id'];
        $par['position']=$position;
        $par->save();
      }
      $position++;
    }
  }
  public static function getNonRootEntries()
  {
    $conn = Doctrine::getConnectionByTableName('tdz_entries');
    $q = new Doctrine_RawSql($conn);
    $q->select('{e.id},{e.title},{e.link},{e.published}')
      ->from("tdz_entries as e left outer join tdz_relations as r on r.entry=e.id or r.parent=e.id")
      ->addComponent('e', 'tdzEntries')
      ->where("e.expired is null and e.type='page' and r.id is null")
      ->orderBy('e.link asc,e.title asc,e.published desc');
    $entries = $q->execute();
    return $entries;
  }

  public static function renderSitemap($entry=null, $options=array())
  {
    $cache = (!is_array($options)||!isset($options['cache'])||$options['cache']);
    $o=$options;
    $o['cache']=false;
    if($cache)
    {
      $co=new sfFileCache(array('cache_dir'=>sfConfig::get('sf_app_cache_dir').'/tdzRelationsSitemap'));
      $lifetime=sfConfig::get('app_e-studio_cache_timeout');
      if($lifetime==0)$lifetime=1800;
      $timeout=time() - $lifetime;
      $updated=tdzEntries::lastModified(true);
      $id=(is_array($entry) || $entry instanceof tdzEntries)?('e'.$entry['id']):('root');
      if(isset($o['indent']) && $o['indent'])$id.='.i'.$o['indent'];
      if(isset($o['selected']) && is_array($o['selected']))
      {
        asort($o['selected']);
        $id.='.s'.implode('-',$o['selected']);
      }

      $cachetime=$co->getLastModified($id);
      if($cachetime>$updated)
        return $co->get($id);
    }

    $i=(isset($o['indent']) && $o['indent'])?("\n".str_repeat('  ', $o['indent']++ -1)):('');
    $i2 = ($i)?($i.' '):('');

    $s = '';
    if(is_null($entry))
    {
      $re=self::getRootEntries();
      $nre=self::getNonRootEntries();
      $s .= $i2.'<ul class="sitemap">';
      foreach($re as $e)
        $s .= self::renderSitemap($e,$o);
      $s .= $i2.'</ul>'.$i2.'<ul class="outside-sitemap">';
      foreach($nre as $e)
        $s .= self::renderSitemap($e,$o);
      $s .= $i2.'</ul>';
    }
    else
    {
      $e=$entry;
      $sel=(isset($o['selected']))?($o['selected']):(array());
      if(!($e instanceof tdzEntries)) $e=tdzEntries::getPage($e['id']);
      $c = (!$e['published'])?('unpublished'):('');
      if(in_array($e['id'],$sel)) $c .= ' selected';
      $c = ($c!='')?(' class="'.trim($c).'"'):('');
      $s .= $i.'<li'.$c.'><a id="e'.$e['id'].'" href="/e-studio/e/edit/'.$e['id'].'#'.$e['link'].'">'.htmlspecialchars($e['title']).'</a>';
      $cs = $e->getChild();
      if($cs->count()>0)
      {
        $s .= $i2.'<ul>';
        foreach($cs as $ce)
          $s .= self::renderSitemap($ce,$o);
        $s .= $i2.'</ul>'.$i;
      }
      $s .= '</li>';
    }
    if($cache)
    {
      $co->set($id,$s,$lifetime);
    }
    return $s;
  }

  public function setParent($s)
  {
    $ne=$s;
    if(is_object($ne)) $ne=$ne->id;
    if($this->entry!=$ne)
      return $this->_set('parent',$s);
  }
  public function preInsert($event)
  {
    $web=(isset($_SERVER['REQUEST_URI']));
    if($web || !strtotime($this->created))
      $this->created = date('Y-m-d H:i:s', time());
    if($web || !strtotime($this->updated))
      $this->updated = date('Y-m-d H:i:s', time());
  }
  public function preUpdate($event)
  {
    $web=(isset($_SERVER['REQUEST_URI']));
    if($web || !strtotime($this->updated))
      $this->updated = date('Y-m-d H:i:s', time());
  }
}