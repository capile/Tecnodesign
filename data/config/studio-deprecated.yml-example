# Here the basic configuration of Studio CMS is detailed and explained.
all:
  studio:
    entry_types:
      entry:
        label: "*Simple entry"
        display: true
      page:
        label: "*Page"
        display: true
      feed:
        label: "*News channel"
        display: true
      file:
        label: "*File"
        display: false
# Permission control
# Here the default permissions are set. Each base role (new|preview|edit|publish|delete)
# can be refined by object type: newEntry, newContent, newContentTypeHtml, newContentTypeFeed
# Unpublished and Published are additional object types to be applied for each role.
# Their presense overrides the raw object type role.
#
# All these options can be further refined by routing or using the tdzPermissions table
#
# Syntax is: [role]: [(array|string) credentials]
# The $user->isSuperAdmin() grants all privileges to the user
#
# This sample uses the following sample credentials: Admin, Developer, Editor, Author, but they may be
# overriden by custom ones using the app.yml config.
    permissions:
      # basic privilege: is overriden by role/object-specific calls
      all: ~

      # who is eligible to view the website. This directive is overriden by the next two directives
      preview: '*'
      # only authorized users may preview unpublished content
      previewUnpublished: [ Administrator, Developer, Editor, Author ]
      # everyone may view published content
      previewPublished: '*'

      new: [ Developer, Editor, Author ]
      # only developers may add the "php" Content type. Note that the most specific
      # credential will be used. The cascading in this case would be:
      # newContentTypePhp > newContent(un)Published > newContent > newEntry(un)Published > newEntry > new(un)Published > new > all
      newContentTypePhp: [ Developer ]
      # Template are content slots without any associated Entry
      newTemplate: [ Developer ]
      # only admins may add new credentials
      newPermission: ~

      edit: [ Administrator, Developer, Editor, Author ]
      # Template are content slots without any associated Entry
      editTemplate: [ Developer ]
      editContentTypePhp: [ Developer ]

      delete: [ Administrator, Developer, Editor ]

      publish: [ Administrator, Editor ]
      # Authors may only publish content (and not the entry)
      # publishContent: [ Administrator, Editor, Author ]

      # only editors may unpublish one entry/content
      # publishEntryPublished: [ Administrator, Editor ]
      # publishContentPublished: [ Administrator, Editor ]

      # CMS UI credentials
      search: [ Administrator, Developer, Editor, Author ]
      
    form_permissions:
      previewPublished: Preview published page
      edit: Update content
      publish: Publish


# With the following option enabled, it will automatically add an automatically generated credential
# named UserCredential[id] where [id] is the $user->getId() (if exists) for each entry added.
#
# This can be used to create a owner-type credentials, eligible for recursion.
# It can also be set to a array mapping of credentials to add (default: all).
# Example:
#
#    auto_permissions: [ editPublished, publish, publishPublished ]
#
# this enables authors to (un)publish their own contents.
#
    auto_permissions: false
    widgets:
      page-title: { label: Page Title, model: tdz, method: getTitle, cache: false }
      tag-cloud: { label: Tag Cloud, model: tdzTags, method: getCloud, cache: false }
      year-nav: { label: Article navigation per year, model: tdzContents, method: getFeedYears, cache: false }
      signin: { label: Sign in, model: tdzUser, method: signIn, cache: false }
# content types eligible for editing
    default_content_type: html
    content_types:
      html:
        title: HTML Content
        fields:
          html: { label: Content, type: html, required: true }
      '':
        title: Plain Text
        fields:
          txt: { label: Content, type: textarea }
      feed:
        title: Article list
        fields:
          entry: { label: Channel, type: choice, model: tdzEntries, method: getFeedChoices, required: true }
          #link_channel: { label: ' ', type: choice, class: checkbox noborder nooverflow, options: { expanded: true, multiple: true }, choices: { 1: Display link to channel } }
          master: { label: Layout, type: choice, model: tdzEntries, method: getMasters }
          limit: { label: Entries to display, type: choice, choices: { "": All, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 25: 25, 100: 100, 1000: 1000 } }
          hpp: { label: Entries per page, type: choice, choices: { "": All, 5: 5, 10: 10, 25: 25, 100: 100 } }
          options: { label: Options, type: choice, class: checkbox nostyle, options: { expanded: true, multiple: true }, choices: { related: Only articles related to the page, linkhome: Display link to channel, preview: Enable preview, filter: Enable filters } }
      media:
        title: Media
        fields:
          src: { label: Media source, type: text, required: true, class: media }
          title: { label: Title, type: text }
          alt: { label: Alternative text, type: text }
          format: { label: Render as, type: choice, choices: { "": Guess format from file, image: Image, video: Embedded video, audio: Embedded audio, flash: Flash presentation, pdf: Embedded PDF, download: Content for download } }
          id: { label: Identifier, type: text }
          href: { label: Link to, type: text }
      php:
        title: PHP Standalone Script
        fields:
          script: { label: PHP Script, type: text }
          pi: { label: Processing instructions, type: textarea }

